<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>tangarts - Azure</title><link href="/" rel="alternate"></link><link href="/feeds/azure.atom.xml" rel="self"></link><id>/</id><updated>2021-12-01T11:11:11+00:00</updated><entry><title>Consistency Levels in Cosmos DB</title><link href="/consistency-levels-in-cosmos-db.html" rel="alternate"></link><published>2021-12-01T11:11:11+00:00</published><updated>2021-12-01T11:11:11+00:00</updated><author><name>Nehemiah Tang-Campbell</name></author><id>tag:None,2021-12-01:/consistency-levels-in-cosmos-db.html</id><summary type="html">&lt;p&gt;TLDR; Cosmos DB offers five different levels of consistency guarantees so that the best performance of an application can be achieved without sacrificing data integrity.&lt;/p&gt;
&lt;h2&gt;What is Consistency?&lt;/h2&gt;
&lt;p&gt;Within distributed systems, consistency assumes there is a single correct way to describe the order in which the events happen. Consistency can â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;TLDR; Cosmos DB offers five different levels of consistency guarantees so that the best performance of an application can be achieved without sacrificing data integrity.&lt;/p&gt;
&lt;h2&gt;What is Consistency?&lt;/h2&gt;
&lt;p&gt;Within distributed systems, consistency assumes there is a single correct way to describe the order in which the events happen. Consistency can also be seen as recency guarantee; there appears to be a single copy of the data. As soon as one client successfully completes a write, all observers reading from the database must be able to see the value just written. &lt;/p&gt;
&lt;p&gt;On one hand, strong consistency guarantees every user will see the latest updated data, but may need to wait for all instances to be up to date. On the other hand, an eventual consistency guarantee means users will get a fast response but may see inconsistent data. &lt;/p&gt;
&lt;p&gt;With globally distributed applications, the characteristics of the chosen consistency level is emphasised. A greater distance for data to travel and a greater number of replicas to update increases the likelihood of performance issues under a strongly consistent model and inconsistent data under an eventually consistent model.&lt;/p&gt;
&lt;p&gt;Different consistency models offer different trade off between consistency, write latencies, throughput and availability. Generally, stronger consistency results in higher write latencies, higher throughput, and reduced availability. The purpose of different consistency levels is to give the client the best performance whilst achieving the minimum accepted level of consistency to an application.&lt;/p&gt;
&lt;p&gt;So what are the consistency level Cosmos offers? What are their guarantees, and when should I use each?&lt;/p&gt;
&lt;p&gt;As a nod to the white paper&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; that made consistency levels click for me, I'll use the example of a global sporting event watched by billions of people, the &lt;a href="https://en.wikipedia.org/wiki/2018_FIFA_World_Cup_Final"&gt;2018 FIFA World Cup final&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The scores and time of updates are as follows:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;th&gt;France&lt;/th&gt;
&lt;th&gt;Croatia&lt;/th&gt;
&lt;th&gt;Database Operation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;read("France"); read("Croatia")&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;write(team: "France", score: 1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;write(team: "Croatia", score: 1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;write(team: "France", score: 2)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;52&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;write(team: "France", score: 3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;59&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;write(team: "France", score: 4)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;69&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;write(team: "Croatia", score: 2)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;90&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;read("France"); read("Croatia")&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In this scenario we have a primary database (located in West Europe region) providing writes to all replicas, and three follower replicas within the data centre. We also geo-replicate our data across each continent, each having four replicas in each data centre.&lt;/p&gt;
&lt;p&gt;We will consider who would most benefit from what consistency level. Cosmos DB allows clients to override the default consistency level for a specific read request, meaning we can relax read consistency per request for increased performance. &lt;/p&gt;
&lt;h2&gt;Guarantees&lt;/h2&gt;
&lt;p&gt;Cosmos DB offers five levels of consistency guarantees. In order of consistency, they are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#strong-consistency"&gt;Strong&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;You will always see the latest version of the data. &lt;/li&gt;
&lt;li&gt;At any point in the game, you will see the latest score. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#bounded-staleness-consistency"&gt;Bounded Staleness&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Reads lag behind writes by at most &lt;em&gt;K&lt;/em&gt; updates or time interval &lt;em&gt;T&lt;/em&gt;. &lt;/li&gt;
&lt;li&gt;The score you see might be old by timespan &lt;em&gt;T&lt;/em&gt;. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#session-consistency"&gt;Session&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Within a "session", reads are functionally strongly consistent. Outside the session, consistent prefix. &lt;/li&gt;
&lt;li&gt;Reads in the "&lt;em&gt;EU west&lt;/em&gt; session" will receive the latest score. Everyone outside may see an old score.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#consistent-prefix-consistency"&gt;Consistent Prefix&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;For all regions, writes are ordered. &lt;/li&gt;
&lt;li&gt;At any point in the game, you will never see a score that has never occurred.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#eventual-consistency"&gt;Eventual&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;No guarantees, reads may be stale and inconsistent. Eventually, the data will be consistent until a new write.&lt;/li&gt;
&lt;li&gt;Any combination of scores may be seen, including scores that never occur.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Strong consistency&lt;/h3&gt;
&lt;p&gt;Also known as linearizability, strong consistency guarantees all your users see the latest writes; every user at the 70 minute mark will see the score &lt;code&gt;{France: 4, Croatia: 2}&lt;/code&gt;. As a consequence, there is increased latency. &lt;/p&gt;
&lt;p&gt;For a write to be committed to the system and acknowledged as successful, &lt;em&gt;all&lt;/em&gt; replicas have to agree on the most recent value. This means high latency and reduced availability. If a region becomes unavailable, since the application cannot accept reads that are stale, the application will not be able to respond until the region has recovered and updated to the most recent write value. &lt;/p&gt;
&lt;p&gt;In practice anyone wanting updates from the World Cup final would be well served by a strong consistency guarantee. However, most people would be OK in seeing a score that is outdated by a few minutes. When would this not be acceptable? As scores are calculated by incrementing the previous score, it would be a disaster if the scorekeeper read the wrong score. In this case, the score keeper could not tolerate stale reads so strong consistency would be appropriate.  &lt;/p&gt;
&lt;h3&gt;Bounded Staleness consistency&lt;/h3&gt;
&lt;p&gt;This is the second strongest consistency guarantee Cosmos DB offers. As the name suggests, there is a window that you can tolerate stale data. Reads can be behind at most &lt;em&gt;K&lt;/em&gt; updates to an item or behind by at most &lt;em&gt;T&lt;/em&gt; time interval, whichever is reached first. For data that falls out of the specified window, the guarantees are identical to strong consistency.&lt;/p&gt;
&lt;p&gt;What is interesting about bounded staleness is that if you know the maximum allowable lag for your system then you can get the same guarantee of strong consistency without the penalty in latency. &lt;/p&gt;
&lt;p&gt;A football pundit only cares about the score during half time and at the end of the game. The pundit could use the length of the game to guarantee they read the most recent score by setting the window to 45 minutes. A read in the 46th minute would mean the most recent score is read and again in the 91st minute for post-game discussion.&lt;/p&gt;
&lt;h3&gt;Session consistency&lt;/h3&gt;
&lt;p&gt;This is the default configured consistency level. Within a single client session, operations are guaranteed to follow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Monotonic Reads&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;While the client can read arbitrarily stale data, it is guaranteed to read data that is increasingly up to date over time. &lt;/li&gt;
&lt;li&gt;(E.g., one it has read the score of &lt;code&gt;{France: 4, Croatia: 2}&lt;/code&gt;, it won't then later see &lt;code&gt;{France: 0, Croatia: 0}&lt;/code&gt; in the same session.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Monotonic writes&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;Ensures that if the client performs writes &lt;em&gt;w&lt;/em&gt; and then &lt;em&gt;v&lt;/em&gt;, all processes within the session observe &lt;em&gt;w&lt;/em&gt; before &lt;em&gt;v&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Read your writes&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;All writes performed by the client are visible to the session's subsequent reads. In other words, strong consistency holds for the writer and clients sharing the same session id.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Write follows reads&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;Ensures that write updates are propagated after performing the previous read operation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consistent prefix&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;Covered in the next section&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A session is defined through a unique session key that all writers include in their requests. Cosmos DB uses the session key to ensure read-my-writes (for the writer) and one of the above guarantees for readers using the session token. Within the same session, reads are consistent. Everyone outside of the session will fall back to the consistent prefix model.&lt;/p&gt;
&lt;p&gt;Session consistency provides good performance: write latencies, availability, and read throughput comparable to that of eventual consistency.&lt;/p&gt;
&lt;p&gt;Revisiting the score keeper we notice that they can achieve consistent reads without sacrificing performance by using session consistency. As the score keeper will be reading their own writes, session consistency guarantees they will see their most recent writes with the added benefit of not having to wait for all replicas to be up to date.&lt;/p&gt;
&lt;h3&gt;Consistent Prefix consistency&lt;/h3&gt;
&lt;p&gt;Also referred to as snapshot isolation; the reader sees a "snapshot of the data". Consistent prefix guarantees whilst they may not read the most current score, the score would reflect a previous score. And unlike bounded staleness, there is no guarantee on how long the delay is.&lt;/p&gt;
&lt;p&gt;With consistent prefix consistency, reads are some prefix of the updates. Possible scores for a consistent prefix read could be one of the following: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{France: 1, Croatia: 0}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{France: 2, Croatia: 1}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{France: 4, Croatia: 1}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{France: 4, Croatia: 2}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Consistent prefix is great for those who wish to have write latencies, availability, and read throughput similar to eventual consistency whilst guaranteeing ordered writes. This means you'll never see a state which could have emerged if the order of writes was changed. As we will see below, a read value of &lt;code&gt;{France: 0, Croatia: 1}&lt;/code&gt; could never happen under consistent prefix as France's first goal (write to the database) was before Croatia's.&lt;/p&gt;
&lt;h3&gt;Eventual consistency&lt;/h3&gt;
&lt;p&gt;Eventual consistency does not guarantee ordering for reads. Writes are also propagated in an arbitrary fashion. This means that you can see data that never occurs. For our football example, under eventual consistency a reader might see the score &lt;code&gt;{France: 0, Croatia: 1}&lt;/code&gt;. In reality, this event never happened as France scored before Croatia. If no more writes occur, the replicas will eventually catch up and become consistent with the leader.&lt;/p&gt;
&lt;p&gt;A casual fan might opt for eventual consistency and read the final score hours or a day later. As there are no writes after the 90th minute, it is highly likely every replica would be updated with the final score when the fan decided to check the score. There is no need to choose a more consistent level than this.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Giving strong consistency gives up performance and availability. The question is then &lt;em&gt;what is the minimum level of consistency that is tolerable to the program that gives you the best performance?&lt;/em&gt; Choosing the best consistency for your 
application requires application semantics and usage scenarios to be understood.&lt;/p&gt;
&lt;p&gt;In reality, Cosmos DBs SLAs guarantee that read latency for all consistency levels is always guaranteed to be less than 10 milliseconds at the 99th percentile. In addition, Cosmos provides a &lt;em&gt;Probabilistic Bounded Staleness (PBS) metric&lt;/em&gt; to quantify when eventual consistency is "good enough". &lt;/p&gt;
&lt;!--

There is no way I could not talk about eventual consistency without sharing this illustration:

![Comic illustrating eventual consistency](/assets/images/blog/2021/12/eventual-consistency.jpg)

--&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;a href="https://www.microsoft.com/research/publication/replicated-data-consistency-explained-through-baseball/"&gt;Replicated Data Consistency Explained Through Baseball (whitepaper) by Doug Terry&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Azure"></category><category term="Azure"></category><category term="CosmosDB"></category><category term="Database"></category></entry></feed>